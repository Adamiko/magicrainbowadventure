<?php

namespace Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EntryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EntryRepository extends EntityRepository
{

	/**
	 * Result cache TTL for entry queries (latest, by rating, etc)
	 * @var int
	 */
	const RESULTS_CACHE_TTL = 600;

	/**
	 * Total number of query results (for pagination)
	 * @var int
	 */
	private $total_query_results;

	/**
	 * Get all Entries
	 *
	 * @param	int		$offset
	 * @param	int		$entries_per_page
	 * @param	string	$search
	 * @return	array
	 */
	public function getAllEntries($offset, $entries_per_page, $search = '')
	{
		$dql = 'SELECT e FROM Entity\Entry e ';

		if ($search)
		{
			$dql .= "WHERE e.title LIKE '%{$search}%' OR e.description LIKE '%{$search}%' ";
		}

		$dql .= 'ORDER BY e.created_date DESC';

		$query = $this->_em->createQuery($dql);

		$this->total_query_results = \DoctrineExtensions\Paginate\Paginate::getTotalQueryResults($query);
		$pagination = \DoctrineExtensions\Paginate\Paginate::getPaginateQuery($query, $offset, $entries_per_page);

		return $pagination->getResult();
	}

	/**
	 * Return the latest approved Entries
	 *
	 * @param	int		$offset
	 * @param	int		$entries_per_page
	 * @return	array
	 */
	public function getLatestEntries($offset, $entries_per_page)
	{
		// Count the total number of results for pagination
		$this->total_query_results = $this->countApprovedEntries();

		// Build the query with our offset and limit
		$query_builder = $this->_em->createQueryBuilder();
		$query_builder->select('e, u')
			->from('Entity\Entry', 'e')
			->join('e.user', 'u')
			->where('e.approved = 1')
			->addOrderBy('e.created_date', 'DESC')
			->setFirstResult($offset)
			->setMaxResults($entries_per_page);

		$query = $query_builder->getQuery();

		return $query->getResult();
	}

	/**
	 * Get all Entries, sorted by an EntryRating column
	 *
	 * @param   int	 $offset
	 * @param   int	 $entries_per_page
	 * @param   string  $rating
	 * @param   string  $order_type
	 * @return  array
	 */
	public function getByRating($offset = 0, $entries_per_page = 20, $rating, $order_type = 'SUM')
	{
		// Count the total number of results for pagination
		$this->total_query_results = $this->countApprovedEntries();

		// Build the query with our offset and limit
		$query_builder = $this->_em->createQueryBuilder();
		$query_builder->select("e, {$order_type}(r.{$rating}) AS rating_value, COUNT(r.id) AS total_ratings")
			->from('Entity\Entry', 'e')
			->leftJoin('e.ratings', 'r')
			->where('e.approved = 1')
			->groupBy('e.id')
			->addOrderBy('rating_value', 'DESC')
			->addOrderBy('total_ratings', 'DESC')
			->setFirstResult($offset)
			->setMaxResults($entries_per_page);

		$query = $query_builder->getQuery();

		$this->total_query_results = \DoctrineExtensions\Paginate\Paginate::getTotalQueryResults($query);
		$pagination = \DoctrineExtensions\Paginate\Paginate::getPaginateQuery($query, $offset, $entries_per_page);
		$results = $query->getResult();

		// Each 'result' is an array with two items: the actual result, and the rating_value aggregate field
		// We'll loop through each result and build an array of Entity\Entry objects
		$object_results = array();

		foreach ($results as $index => $result)
		{
			$object_results[$index] = $result[0];
		}

		return $object_results;
	}

	/**
	 * Return the number of entries that have not yet been moderated
	 *
	 * @return	int
	 */
	public function countEntriesToModerate()
	{
		// Run the query and save the cache
		$query = $this->_em->createQuery('SELECT COUNT(e.id) FROM Entity\Entry e WHERE e.moderated_by IS NULL');
		$query->useResultCache(true, self::RESULTS_CACHE_TTL);

		return $query->getSingleScalarResult();
	}

	/**
	 * Return the latest to-be-moderated Entries
	 *
	 * @param	int		$offset
	 * @param	int		$entries_per_page
	 * @return	array
	 */
	public function getEntriesToModerate($offset = 0, $entries_per_page = 20)
	{
		$query = $this->_em->createQuery('SELECT e FROM Entity\Entry e WHERE e.moderated_by IS NULL ORDER BY e.created_date DESC');

		$this->total_query_results = \DoctrineExtensions\Paginate\Paginate::getTotalQueryResults($query);
		$pagination = \DoctrineExtensions\Paginate\Paginate::getPaginateQuery($query, $offset, $entries_per_page);

		return $pagination->getResult();
	}

	/**
	 * Get total query results (must be called AFTER a method that uses pagination
	 * e.g. getLatestEntries)
	 *
	 * @return int
	 */
	public function getTotalQueryResults()
	{
		return $this->total_query_results;
	}

	/**
	 * Count the total number of approved Entries in the database
	 *
	 * @return int
	 */
	protected function countApprovedEntries()
	{
		$query = $this->_em->createQuery('SELECT COUNT(e.id) FROM Entity\Entry e WHERE e.approved = 1');

		return $query->getSingleScalarResult();
	}

}
